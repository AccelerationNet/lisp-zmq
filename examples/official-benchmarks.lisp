
(in-package :zmq-examples)

(defun local-thr (address message-size message-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :sub)
      (zmq:setsockopt socket :subscribe "")
      (zmq:bind socket address)
      (zmq:with-msg-init (message)
        (flet ((receive-message ()
                 (zmq:recv socket message)
                 (when (/= (zmq:msg-size message) message-size)
                   (format t "message of incorrect size received~%"))))
          (receive-message)
          (let* ((elapsed-time (zmq:with-stopwatch
                                 (do ((i 0 (1+ i)))
                                     ((= i (- message-count 1)))
                                   (receive-message))))
                 (throughput (* (/ message-count elapsed-time) 1000000))
                 (megabits (/ (* throughput message-size 8) 1000000)))
            (format t "message size: ~A [B]~%" message-size)
            (format t "message count: ~A ~%" message-count)
            (format t "mean throughput ~A [msg/s]~%" (round throughput))
            (format t "mean throughput ~,3F [Mb/s]~%" (round megabits))))))))

(defun remote-thr (address message-size message-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :pub)
      (zmq:connect socket address)
      (do ((i 0 (1+ i)))
          ((= i message-count))
        (zmq:with-msg-init-size (message message-size)
          (zmq:send socket message))))))

(defun local-lat (address message-size roundtrip-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :rep)
      (zmq:bind socket address)
      (zmq:with-msg-init (message)
        (do ((i 0 (1+ i)))
            ((= i roundtrip-count))
          (zmq:recv socket message)
          (unless (eq (zmq:msg-size message) message-size)
            (error "Message of incorrect size ~A received."
                   (zmq:msg-size message)))
          (zmq:send socket message))))))

(defun remote-lat (address message-size roundtrip-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :req)
      (zmq:connect socket address)
      (zmq:with-msg-init-size (message message-size)
        (let* ((elapsed-time (zmq:with-stopwatch
                               (do ((i 0 (1+ i)))
                                   ((= i roundtrip-count))
                                 (zmq:send socket message)
                                 (zmq:recv socket message)
                                 (unless (eq (zmq:msg-size message) message-size)
                                   (error "Message of incorrect size ~A received."
                                          (zmq:msg-size message))))))
               (latency (/ elapsed-time (* roundtrip-count 2))))
          (format t "message size: ~A [B]~%" message-size)
          (format t "roundtrip count: ~A~%" roundtrip-count)
          (format t "average latency: ~,3F [us]~%" latency))))))

(defun inproc-thr (message-size message-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :sub)
      (zmq:setsockopt socket :subscribe "")
      (zmq:bind socket "inproc://thr_test")
      (let ((thread (bordeaux-threads:make-thread
                     (lambda ()
                       (zmq:with-socket (socket context :pub)
                         (zmq:connect socket "inproc://thr_test")
                         (do ((i 0 (1+ i)))
                             ((= i message-count))
                           (zmq:with-msg-init-size (message message-size)
                             (zmq:send socket message))))))))
        (zmq:with-msg-init (message)
          (zmq:recv socket message)
          (unless (eq (zmq:msg-size message) message-size)
            (error "Message of incorrect size ~A received."
                   (zmq:msg-size message)))
          (let* ((elapsed-time (zmq:with-stopwatch
                                 (do ((i 0 (1+ i)))
                                     ((= i (- message-count 1)))
                                   (zmq:recv socket message)
                                   (unless (eq (zmq:msg-size message) message-size)
                                     (error "Message of incorrect size ~A received."
                                            (zmq:msg-size message))))))
                 (throughput (* (/ message-count elapsed-time) 1000000))
                 (megabits (/ (* throughput message-size 8) 1000000)))
            (format t "message count: ~A~%" message-count)
            (format t "message size: ~A [B]~%" message-size)
            (format t "mean throughput ~A [msg/s]~%" (round throughput))
            (format t "mean throughput ~,3F [Mb/s]~%" (round megabits))))
        (bordeaux-threads:join-thread thread)))))

(defun inproc-lat (message-size roundtrip-count)
  (zmq:with-context (context 1)
    (zmq:with-socket (socket context :req)
      (zmq:bind socket "inproc://lat_test")
      (let ((thread (bordeaux-threads:make-thread
                     (lambda ()
                       (zmq:with-socket (socket context :rep)
                         (zmq:connect socket "inproc://lat_test")
                         (zmq:with-msg-init (message)
                           (do ((i 0 (1+ i)))
                               ((= i roundtrip-count))
                             (zmq:recv socket message)
                             (zmq:send socket message))))))))
        (zmq:with-msg-init-size (message message-size)
          (let* ((elapsed-time (zmq:with-stopwatch
                                 (do ((i 0 (1+ i)))
                                     ((= i roundtrip-count))
                                   (zmq:send socket message)
                                   (zmq:recv socket message)
                                   (unless (eq (zmq:msg-size message) message-size)
                                     (error "Message of incorrect size ~A received."
                                            (zmq:msg-size message))))))
                 (latency (/ elapsed-time (* roundtrip-count 2))))
            (format t "message size: ~A [B]~%" message-size)
            (format t "roundtrip count: ~A~%" roundtrip-count)
            (format t "average latency: ~,3F [us]~%" latency)))
        (bordeaux-threads:join-thread thread)))))
