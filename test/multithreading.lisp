
(in-package :zmq-test)

(in-suite multithreading)

(test multiple-readers
  (zmq:with-context (context 1)
    (zmq:with-sockets ((pub-socket context :pub)
                       (sub-socket context :sub :thread-safe t))
      (zmq:bind pub-socket "inproc://zmq-test")
      (zmq:setsockopt sub-socket :subscribe "")
      (zmq:connect sub-socket "inproc://zmq-test")
      (let ((lock (bordeaux-threads:make-lock))
            (messages nil))
        (flet ((reader-main ()
                 (dotimes (i 100)
                   (zmq:with-msg-init (message)
                     (zmq:recv sub-socket message)
                     (bordeaux-threads:with-lock-held (lock)
                       (push (zmq:msg-data-string message) messages))))))
          (let ((thread-1 (bordeaux-threads:make-thread
                           #'reader-main :name "zmq-test thread 1"))
                (thread-2 (bordeaux-threads:make-thread
                           #'reader-main :name "zmq-test thread 2")))
            (dotimes (i 200)
              (zmq:with-msg-init-data (message "test")
                (zmq:send pub-socket message)))
            (bordeaux-threads:join-thread thread-1)
            (bordeaux-threads:join-thread thread-2)
            (is-true (and (= (length messages) 200)
                          (every (lambda (message)
                                   (string= message "test"))
                                 messages)))))))))

(test multiple-writers
  (zmq:with-context (context 1)
    (zmq:with-sockets ((pub-socket context :pub :thread-safe t)
                       (sub-socket context :sub))
      (zmq:bind pub-socket "inproc://zmq-test")
      (zmq:setsockopt sub-socket :subscribe "")
      (zmq:connect sub-socket "inproc://zmq-test")
      (flet ((writer-main ()
               (dotimes (i 100)
                 (zmq:with-msg-init-data (message "test")
                   (zmq:send pub-socket message)))))
        (let ((thread-1 (bordeaux-threads:make-thread
                         #'writer-main :name "zmq-test thread 1"))
              (thread-2 (bordeaux-threads:make-thread
                         #'writer-main :name "zmq-test thread 2")))
          (let ((messages nil))
            (dotimes (i 200)
              (zmq:with-msg-init (message)
                (zmq:recv sub-socket message)
                (push (zmq:msg-data-string message) messages)))
            (bordeaux-threads:join-thread thread-1)
            (bordeaux-threads:join-thread thread-2)
            (is-true (and (= (length messages) 200)
                          (every (lambda (message)
                                   (string= message "test"))
                                 messages)))))))))
